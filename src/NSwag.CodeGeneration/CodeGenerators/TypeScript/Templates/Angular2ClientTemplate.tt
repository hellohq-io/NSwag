<#@ template visibility="internal" #>
<#@ import namespace="NJsonSchema" #>
<#@ import namespace="CodeGenerators.TypeScript" #>
import { AppConfig } from '../config/app.config';


export class HQAPIEntity {

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["Id"] !== undefined ? data["Id"] : 0;
            this.createdBy = data["CreatedBy"] !== undefined ? data["CreatedBy"] : 0;
            this.updatedBy = data["UpdatedBy"] !== undefined ? data["UpdatedBy"] : 0;
            this.createdOn = data["CreatedOn"] ? new Date(data["CreatedOn"].toString()) : null;
            this.updatedOn = data["UpdatedOn"] ? new Date(data["UpdatedOn"].toString()) : null;
        }
    }

    /** The unique identifier of this entity */
    id: number; 
    /** The id of the user who created this entity */
    createdBy: number; 
    /** The id of the last user who modified this entity */
    updatedBy: number; 
    /** The date and time this entity was created, in UTC */
    createdOn: Date; 
    /** The last date and time this entity was updated, in UTC */
    updatedOn: Date;
} 

<#if(Model.HasOperations){#>
<#if(Model.GenerateClientInterfaces){#>
export interface I<#=Model.Class#> {
<#foreach(var operation in Model.Operations){#>
<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#}#><#}#>): Observable<<#=operation.ResultType#>>;
<#}#>}
<#}#>

@Injectable()
export class <#=Model.Class#> <#if(Model.GenerateClientInterfaces){#>implements I<#=Model.Class#> <#}#>{
    private http: Http = null; 
    private authHeader: string = undefined; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: <#if(Model.SupportsStrictNullChecks){#>((key: string, value: any) => any) | undefined<#}else{#>(key: string, value: any) => any<#}#> = undefined;

    constructor(@Inject(Http) http: Http, appConfig: AppConfig, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = (baseUrl ? baseUrl : (appConfig ? appConfig.getConfig('apiUrl') :  "<#=Model.BaseUrl#>")); 
        console.log("Using api url:", this.baseUrl);
    }
	
	/**
	 * Sets the authorization header to OAuth
	 */
    setBearerAuthorization(token: string){
        this.authHeader = "Bearer " +  token;
    }
	
	/**
	 * Sets the authorization header to Basic auth
	 */
    setBasicAuthorization(userName: string, password: string){
        this.authHeader = "Basic " +  btoa(userName + ":" + password);
    }

	/**
	 * Returns the current authorization header
	 */
	GetAuthHeader(): string{
		return this.authHeader;
	}

<#if(Model.IsExtended){#>

    protected transformOptions(options: RequestOptionsArgs) {
        return options; 
    }

    protected transformResult(url: string, response: Response, processor: (response: Response) => any) {
        return processor(response);
    }
<#}#>
<#foreach(var operation in Model.Operations){#>

<#if(operation.HasDocumentation){#>    /**
<#if(operation.HasSummary){#>     * <#=operation.Summary#>
<#}#><#foreach(var parameter in operation.Parameters){#>
<#if(parameter.HasDescription){#>     * @<#=parameter.VariableName#> <#=parameter.Description ?? ""#>
<#}#><#}#><#if(operation.HasResultDescription){#>     * @return <#=operation.ResultDescription#>
<#}#><#if(operation.IsDeprecated){#>     * @deprecated
<#}#>     */
<#}#>    <#=operation.OperationNameLower#>(<#foreach(var parameter in operation.Parameters){#><#=parameter.VariableName#>: <#=parameter.Type#><#if(!parameter.IsLast){#>, <#} else {#>, fromCache = false<#}#><#}#>): Observable<<#=operation.ResultType#>> {
        <#=TemplatePartGenerator.RenderRequestUrlCode(operation, 2)#>

        <#=TemplatePartGenerator.RenderRequestBodyCode(operation, 2)#>
		var cacheKey = fromCache ? btoa(url_) : null;
        var cacheEntry = fromCache ? localStorage.getItem(cacheKey) : null;

        if(!fromCache || cacheEntry == null){
			console.log('Getting ' + url_ + ' since ' + (fromCache ? 'not in cache' : 'cache is disabled'));
			return this.http.request(url_, <#if(Model.IsExtended){#>this.transformOptions(<#}#>{
				body: content_,
				method: "<#=operation.HttpMethodLower#>",
				headers: new Headers({
<#foreach(var parameter in operation.HeaderParameters){#>
                "<#=parameter.Name#>": <#=parameter.VariableName#>, 
<#}#>
<#if(operation.HasFormParameters){#>                'Content-Type': undefined,
<#}else{#>
					"Content-Type": "application/json; charset=UTF-8",
<#}#>
					"Authorization": this.GetAuthHeader()
				})
			}<#if(Model.IsExtended){#>)<#}#>).map((response) => {
				if(fromCache) {
					try {
						localStorage.setItem(cacheKey, btoa(response.text()));
					} catch(e) {}
				}
<#if(Model.IsExtended){#>
				return this.transformResult(url_, response, (response) => this.process<#=operation.OperationNameUpper#>(response));
<#}else{#>
				return this.process<#=operation.OperationNameUpper#>(response);
<#}#>
			}).catch((response: any, caught: any) => {
				if (response instanceof Response) {
					try {
<#if(Model.IsExtended){#>
						return Observable.of(this.transformResult(url_, response, (response) => this.process<#=operation.OperationNameUpper#>(response)));
<#}else{#>
						return Observable.of(this.process<#=operation.OperationNameUpper#>(response));
<#}#>
					} catch (e) {
						return <Observable<<#=operation.ResultType#>>><any>Observable.throw(e);
					}
				} else
					return <Observable<<#=operation.ResultType#>>><any>Observable.throw(response);
			});
		} else {
			console.log('Getting ' + url_ + ' from cache');
			return new Observable<<#=operation.ResultType#>>(observer => {
				setTimeout(() => {
					observer.next(this.parse<#=operation.OperationNameUpper#>(atob(cacheEntry), 200));
				}, 0);
				setTimeout(() => {
					observer.complete();
				}, 0);
			});
		}
    }

    protected process<#=operation.OperationNameUpper#>(response: Response): <#=operation.ResultType#> {
        const responseText = response.text();
        const status = response.status; 

<#foreach(var response in operation.Responses){#>
        if (status === <#=response.StatusCode#>) {
<#if(response.HasType){#>
<#  if(response.IsDate){#>
            result<#=response.StatusCode#> = new Date(data);
<#  }else{#>
<#      if(response.UseDtoClass){#>
<#      }else{#>
            result<#=response.StatusCode#> = data === "" ? null : <<#=response.Type#>>JSON.parse(data, this.jsonParseReviver);
<#      }#>
<#  }#>
<#  if(response.IsSuccess){#>
            return this.parse<#=operation.OperationNameUpper#>(responseText, status);
<#  }else{#>
            throw result<#=response.StatusCode#>; 
<#  }
}#>
        }
        else
<#}#>        {
<#if(operation.HasDefaultResponse){#>
<#  if(operation.DefaultResponse.IsDate){#>
            result = new Date(data);
<#  }else{#>
<#      if(operation.DefaultResponse.UseDtoClass){#>
<#      }else{#>
            result = data === "" ? null : <<#=operation.DefaultResponse.Type#>>JSON.parse(data, this.jsonParseReviver);
<#      }#>
<#  }#>
<#  if(operation.DefaultResponse.IsSuccess){#>
            return this.parse<#=operation.OperationNameUpper#>(data, status);
<#  }else{#>
            throw result; 
<#  }
}else{#>
            throw new Error("error_no_callback_for_the_received_http_status"); 
<#}#>
        }
    }

    private parse<#=operation.OperationNameUpper#>(data: string, status: number) {
<#foreach(var response in operation.Responses){#>
        if (status === <#=response.StatusCode#>) {
<#if(response.HasType){#>
            let result<#=response.StatusCode#>: <#=response.Type#> = null; 
<#  if(response.IsDate){#>
            result<#=response.StatusCode#> = new Date(data);
<#  }else{#>
<#      if(response.UseDtoClass){#>
            let resultData<#=response.StatusCode#> = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            <#=ConversionUtilities.Tab(response.DataConversionCode, 3)#>
<#      }else{#>
            result<#=response.StatusCode#> = data === "" ? null : <<#=response.Type#>>JSON.parse(data, this.jsonParseReviver);
<#      }#>
<#  }#>
<#  if(response.IsSuccess){#>
            return result<#=response.StatusCode#>; 
<#  }else{#>
            throw result<#=response.StatusCode#>; 
<#  }
}#>
        }
        else
<#}#>        {
<#if(operation.HasDefaultResponse){#>
            let result: <#=operation.DefaultResponse.Type#> = null; 
<#  if(operation.DefaultResponse.IsDate){#>
            result = new Date(data);
<#  }else{#>
<#      if(operation.DefaultResponse.UseDtoClass){#>
            let resultData = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            <#=ConversionUtilities.Tab(operation.DefaultResponse.DataConversionCode, 3)#>
<#      }else{#>
            result = data === "" ? null : <<#=operation.DefaultResponse.Type#>>JSON.parse(data, this.jsonParseReviver);
<#      }#>
<#  }#>
<#  if(operation.DefaultResponse.IsSuccess){#>
            return result; 
<#  }else{#>
            throw result; 
<#  }
}else{#>
            throw new Error("error_no_callback_for_the_received_http_status"); 
<#}#>
        }
	}
<#}#>

    <#=TemplatePartGenerator.RenderClientMethodsCode(Model, 1)#>
	}
<#}#>

	
